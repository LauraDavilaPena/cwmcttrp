#string <- "instances/CHAO_MCTTRP_01.txt"
#matriz.distancia <- input_MCTTRP(string)$matriz.distancia
#result <- CW_algorithm(string, "MCTTRP", 5, 3, 0)

#solution <- result$result_res

result_improvement <- function(input, result, solution){
  
  improved_solution <- solution
  
  route_to_improve <- list()
  route_index <- list()
  t <- 1
  for(r in 1:length(solution)){
    route_index[[t]] <- r
    
    if(solution[[r]]$type == "CVR"){
      route_to_improve[[t]] <- solution[[r]]$main_tour
    }else{
      route_to_improve[[t]] <- solution[[r]]$route
    }
    
    improved_method <- list()
    improved_route <- list()
    delta_improvements <- list()
    
    
    improved_method[[1]] <- c("two-opt")
    improved_method[[2]] <- c("three-opt")
    improved_method[[3]]<- c("four-opt-asterisk")
    
    improved_route[[1]] <- two_opt(route_to_improve[[t]])
    improved_route[[2]] <- three_opt(route_to_improve[[t]])
    improved_route[[3]] <- four_opt_asterisk(route_to_improve[[t]])
    
    delta_improvements[[1]] <- calculateTotalDistance(improved_route[[1]]) - calculateTotalDistance(route_to_improve[[t]])
    delta_improvements[[2]] <- calculateTotalDistance(improved_route[[2]]) - calculateTotalDistance(route_to_improve[[t]])
    delta_improvements[[3]] <- calculateTotalDistance(improved_route[[3]]) - calculateTotalDistance(route_to_improve[[t]])
    
    if(any(delta_improvements!=0)){
    print(paste("Hay mejora en la ruta", r))
    
    improvement_index <- which(delta_improvements==min(unlist(delta_improvements)))
    
    
    if(length(improvement_index)>1){
      chosen_improvement_index <- sample(improvement_index, 1)
    }else{
      chosen_improvement_index <- improvement_index
    }
    
    chosen_improved_route <- improved_route[[chosen_improvement_index]]
    
    if(solution[[r]]$type == "CVR"){
      
      improved_solution[[r]]$main_tour <- chosen_improved_route
      
      subtours <- solution[[r]]$subtours
      kk <- 1
      improved_subtour <- list()
      delta_impr_subtour <- list()
      
      for(k in 1:length(subtours)){
        improved_subtour[[k]] <- list()
        delta_impr_subtour[[k]] <- list()
        
        improved_subtour[[k]][[1]] <- two_opt(subtours[[k]]$tour)
        improved_subtour[[k]][[2]] <- three_opt(subtours[[k]]$tour)
        improved_subtour[[k]][[3]] <- four_opt_asterisk(subtours[[k]]$tour)
        
        delta_impr_subtour[[k]][[1]] <- calculateTotalDistance(improved_subtour[[k]][[1]]) - calculateTotalDistance(subtours[[k]]$tour)
        delta_impr_subtour[[k]][[2]] <- calculateTotalDistance(improved_subtour[[k]][[2]]) - calculateTotalDistance(subtours[[k]]$tour)
        delta_impr_subtour[[k]][[3]] <- calculateTotalDistance(improved_subtour[[k]][[3]]) - calculateTotalDistance(subtours[[k]]$tour)
        
        
        if(any(delta_impr_subtour[[k]]!=0)){
        
          impr_subtour_index <- which(delta_impr_subtour[[k]]==min(unlist(delta_impr_subtour[[k]])))
          
          
          if(length(impr_subtour_index)>1){
            chosen_impr_subtour_index <- sample(impr_subtour_index, 1)
          }else{
            chosen_impr_subtour_index <- impr_subtour_index
          }
          
          chosen_impr_subtour <- improved_subtour[[k]][[chosen_improvement_index]]
          improved_solution[[r]]$subtours[[k]]$tour <- chosen_impr_subtour
          
        }
        
        
        if(length(which(chosen_improved_route==subtours[[k]]$root)) > 1){
          kk <- sum(chosen_improved_route  == subtours[[k]]$root)
          
        }
        chosen_improved_route <- c(chosen_improved_route[1:which(chosen_improved_route==subtours[[k]]$root)[kk] ], subtours[[k]]$tour[2:(length(subtours[[k]]$tour))], 
                                   chosen_improved_route[(which(chosen_improved_route==subtours[[k]]$root)[kk]+1): length(chosen_improved_route)] ) 
      }
      
      
    }
    
    
    improved_solution[[r]]$route <- chosen_improved_route
    improved_solution[[r]]$cost <- calculateTotalDistance(chosen_improved_route)
    
    
    }
    
  }
  
  return(improved_solution)
  
  
}

