if (result[[z]]$type == "CVR") main_root2 <- return_main_route(result[[z]]$route)
else main_root2 <- result[[z]]$route
for (w in 2:(length(main_root2)-1)) {
clientw <- main_root2[w]
if ((clientw <= input$n1)&&(clientw != clientz)) {
# new routes
route1 <- replace_route_client(clienti, clientz, result[[i]]$route)
route2 <- replace_route_client_subroute(clientz, clienti, clientw, result[[z]]$route)
# feasibility
feasible_route1 <- check_feasibility(result, route1, input, result[[i]]$type, type_problem, penalty_capacity)
feasible_route2 <- check_feasibility(result, route2, input, result[[z]]$type, type_problem, penalty_capacity)
# add to mov list
if (feasible_route1 && feasible_route2) {
res_mov <- add_movements_to_list(input, result, i, z,  c(clienti), c(clientz),
"exchange_movement_tc_PTR_and_vc_in_main_tour",
route1, route2,  mov_list, mov_list_cost, zeta, alpha, table_freq, counter_i)
mov_list <- res_mov$mov_list
mov_list_cost <- res_mov$mov_list_cost
}
}
}
}
}
}
}
}
}
}
}
res <- list()
res$mov_list <- mov_list
res$mov_list_cost <- mov_list_cost
return(res)
}
exchange_movement_client_short_subtour_and_client_in_main_tour<-function(input, result, mov_list, mov_list_cost, type_problem,
vecinity, perc_vecinity, penalty_capacity, zeta, alpha, table_freq, counter_i) {
for (i in 1:length(result)) {
if (result[[i]]$type == "CVR") {
subroutes <- return_subroutes(result[[i]]$route, input$n1)
for (s in 1:length(subroutes))  {
if (length(subroutes[[s]]$tour)==3) {
clienti <- subroutes[[s]]$tour[2]
for (z in 1:length(result)) {
if (i!=z) {
if (result[[z]]$type == "CVR") route_z <- result[[z]]$main_tour
else route_z <- result[[z]]$route
for (t in 2:(length(route_z)-1)) {
clientz <- route_z[t]
if ((clientz <= input$n1)&&(sum(clientz==result[[z]]$route)==1)&&(is_in_vecinity(clienti, clientz, vecinity, perc_vecinity))) {
if (result[[z]]$type == "PTR") {
# new routes
route1 <- replace_subroute_vc_2(subroutes[[s]], clientz, result[[i]]$route)
route2 <- replace_route_client(clientz, clienti, result[[z]]$route)
# feasibility
feasible_route1 <- check_feasibility(result, route1, input, result[[i]]$type, type_problem, penalty_capacity)
feasible_route2 <- check_feasibility(result, route2, input, result[[z]]$type, type_problem, penalty_capacity)
# add to mov list
if (feasible_route1 && feasible_route2) {
res_mov <- add_movements_to_list(input, result, i, z,  c(clienti), c(clientz),
"exchange_movement_client_short_subtour_and_client_in_main_tour",
route1, route2,  mov_list, mov_list_cost, zeta, alpha, table_freq, counter_i)
mov_list <- res_mov$mov_list
mov_list_cost <- res_mov$mov_list_cost
}
}
else {
for (w in 2:(length(route_z)-1)) {
clientw <- route_z[w]
if ((clientw <= input$n1)&&(clientw != clientz)) {
# new routes
#route1 <- replace_route_client_vc_subroute(clienti, clientz, result[[i]]$route)
route1 <- replace_subroute_vc_2(subroutes[[s]], clientz, result[[i]]$route)
route2 <- replace_route_client_subroute(clientz, clienti, clientw, result[[z]]$route)
# feasibility
feasible_route1 <- check_feasibility(result, route1, input, result[[i]]$type, type_problem, penalty_capacity)
feasible_route2 <- check_feasibility(result, route2, input, result[[z]]$type, type_problem, penalty_capacity)
# add to mov list
if (feasible_route1 && feasible_route2) {
res_mov <- add_movements_to_list(input, result, i, z,  c(clienti), c(clientz),
"exchange_movement_client_short_subtour_and_client_in_main_tour",
route1, route2,  mov_list, mov_list_cost, zeta, alpha, table_freq, counter_i)
mov_list <- res_mov$mov_list
mov_list_cost <- res_mov$mov_list_cost
}
}
}
}
}
}
}
}
}
}
}
}
res <- list()
res$mov_list <- mov_list
res$mov_list_cost <- mov_list_cost
return(res)
}
exchange_movement_client_subtour_and_vc_creating_subtour<-function(input, result, mov_list, mov_list_cost, type_problem,
vecinity, perc_vecinity, penalty_capacity, zeta, alpha, table_freq, counter_i) {
for (i in 1:length(result)) {
if (result[[i]]$type == "CVR") {
subroutes <- return_subroutes(result[[i]]$route, input$n1)
for (s in 1:length(subroutes))  {
if (length(subroutes[[s]]$tour)==3) {
for (j in 2:(length(subroutes[[s]]$tour)-1)) {
clienti <- subroutes[[s]]$tour[j]
for (z in 1:length(result)) {
if ((i!=z)&&(result[[z]]$type == "CVR")) {
subroutes2 <- return_subroutes(result[[z]]$route, input$n1)
for (ss in 1:length(subroutes2))  {
for (t in 2:(length(subroutes2[[ss]]$tour)-1)) {
clientz <- subroutes2[[ss]]$tour[t]
if (( clientz <= input$n1)&&(is_in_vecinity(clienti, clientz, vecinity, perc_vecinity))) {
# new routes
route1 <- replace_route_client_vc_subroute(clienti, clientz, result[[i]]$route)
route2 <- replace_route_client(clientz, clienti, result[[z]]$route)
# feasibility
feasible_route1 <- check_feasibility(result, route1, input, result[[i]]$type, type_problem, penalty_capacity)
feasible_route2 <- check_feasibility(result, route2, input, result[[z]]$type, type_problem, penalty_capacity)
# add to mov list
if (feasible_route1 && feasible_route2) {
res_mov <- add_movements_to_list(input, result, i, z,  c(clienti), c(clientz),
"exchange_movement_client_subtour_and_vc_creating_subtour",
route1, route2,  mov_list, mov_list_cost, zeta, alpha, table_freq, counter_i)
mov_list <- res_mov$mov_list
mov_list_cost <- res_mov$mov_list_cost
}
}
}
}
}
}
}
}
}
}
}
res <- list()
res$mov_list <- mov_list
res$mov_list_cost <- mov_list_cost
return(res)
}
replace_subroute_vc<-function(subroute, clientvc, route){
# delete subroutes
route <- delete_subroute(subroute$tour, route)
for (i in 1:length(route)) {
if (route[i] == subroute$root) {
route[i] <- clientvc
}
}
return(route)
}
replace_subroute_vc_2<-function(subroute, clientvc, route){
# delete subroutes
route <- delete_subroute(subroute$tour, route)
new_route <- c(0)
no_more_root <- 1
for (i in 2:length(route)) {
if ((route[i] == subroute$root)&&(no_more_root)) {
new_route <- c(new_route, route[i])
new_route <- c(new_route, clientvc)
no_more_root <- 0
} else new_route <- c(new_route, route[i])
}
return(new_route)
}
replace_route_client<-function(clienti, clientj, route){
for (i in 1:length(route)) {
if (route[i] == clienti) {
route[i] <- clientj
}
}
return(route)
}
replace_route_client_subroute<-function(clienti, clientj, clientz, route){
# delete clienti
new_route <- c(0)
counter <- 0
for (i in 2:length(route)) {
if (route[i] != clienti) {
new_route <- c(new_route, route[i])
}
if (route[i] == clientz) {
counter <- counter + 1
}
}
# add clientj as a subtour in clientz
if (counter == 1) {
new_route2 <- c(0)
for (i in 2:length(new_route)) {
if ((new_route[i] == clientz)) {
new_route2 <- c(new_route2, clientz)
new_route2 <- c(new_route2, clientj)
new_route2 <- c(new_route2, clientz)
} else {
new_route2 <- c(new_route2, new_route[i])
}
}
} else {
index <- which (new_route == clientz)
new_route2 <- c(0)
for (i in 2:length(new_route)) {
if (i == index[1]) {
new_route2 <- c(new_route2, clientz)
new_route2 <- c(new_route2, clientj)
new_route2 <- c(new_route2, clientz)
} else {
new_route2 <- c(new_route2, new_route[i])
}
}
}
return(new_route2)
}
replace_route_client_vc_subroute<-function(clienti, clientj, route){
# delete clienti from subroute
for (i in 2:length(route)) {
if (route[i] == clienti) {
index_client_i <- i
}
}
new_route <- c(route[1:(index_client_i-1)], clientj, route[(index_client_i+2):length(route)])
return(new_route)
}
replace_subroute<-function(old_subroute, subroute, route){
root <- old_subroute[1]
route <- delete_subroute(old_subroute, route)
route <- add_subroute(root, subroute, route)
return(route)
}
add_subroute<-function(clienti, subroute, route){
counter <- 0
for (i in 2:length(route)) {
if (route[i] == clienti) {
counter <- counter + 1
}
}
for (i in 2:length(route)) {
if (route[i] == clienti) {
index_client_i <- i
break;
}
}
if (counter == 1) {
subroute <- subroute[2:(length(subroute)-1)]
# add subroute
new_route <- c(route[1:(index_client_i)], subroute, route[(index_client_i):length(route)])
}
else {
subroute <- subroute[2:(length(subroute)-1)]
# add subroute
new_route <- c(route[1:(index_client_i)], subroute, route[(index_client_i):length(route)])
}
return(new_route)
}
delete_subroute<-function(subroute, route){
subroute <- subroute[2:(length(subroute)-1)]
new_route <- c(0)
for (i in 2:length(route)) {
if (sum(subroute==route[i])==0) {
new_route <- c(new_route, route[i])
}
}
new_route2 <- c(0)
for (i in 2:length(new_route)) {
if (new_route[i]!=new_route[i-1]) {
new_route2 <- c(new_route2, new_route[i])
}
}
return(new_route2)
}
delete_client<-function(client, route){
new_route <- c(0)
for (i in 2:length(route)) {
if (client!=route[i]) {
new_route <- c(new_route, route[i])
}
}
return(new_route)
}
split_subroute<-function(clienti, route){
for (i in 2:length(route)) {
if (route[i] == clienti) {
index_client_i <- i
}
}
for (i in index_client_i:1) {
if (sum(route[i] == route)>1) {
root1 <- i
break
}
}
for (i in index_client_i:length(route)) {
if (sum(route[i] == route)>1) {
root2 <- i
break
}
}
route <-c( route[1:(index_client_i-1)], route[root1],  clienti, route[root2], route[(index_client_i+1):length(route)])
return(route)
}
add_movements_to_list<-function(input, result, indexr1, indexr2, client1, client2, string,
route1, route2, mov_list, mov_list_cost, zeta, alpha, table_freq, counter_i) {
if ((length(route2)>1))  {
# type
new_type1 <- check_new_type(result[[indexr1]]$type, route1, input)
# penalty_inf
penalty_inf <- alpha * calc_penalty_unique(input, new_type1, route1)
# penalty_freq
penalty_freq <- 0
#if ((zeta!=0)&&(alpha!=0)) {
#    for (i in 1:length(client1)) {
#      penalty_freq <- penalty_freq + return_table_freq(table_freq, client1[i], indexr1)
#    }
#    penalty_freq <- 1 + zeta * penalty_freq / counter_i
#    # cost
#    cost1 <-  (local_cost(route1, input$matriz.distancia) + penalty_inf) * penalty_freq
#} else {
# cost
#   cost1 <-  (local_cost(route1, input$matriz.distancia) + penalty_inf)
#}
# type
new_type2 <- check_new_type(result[[indexr2]]$type, route2, input)
# penalty_inf
penalty_inf <- alpha * calc_penalty_unique(input, new_type2, route2)
# penalty_freq
#penalty_freq <- 0
#if ((zeta!=0)&&(alpha!=0)) {
#    for (i in 1:length(client2)) {
#      penalty_freq <- penalty_freq + return_table_freq(table_freq, client2[i], indexr2)
#    }
#    penalty_freq <- 1 + zeta * penalty_freq / counter_i
# cost
#    cost2 <-  (local_cost(route2, input$matriz.distancia) + penalty_inf) * penalty_freq
#} else {
# cost
cost2 <-  (local_cost(route2, input$matriz.distancia) + penalty_inf)
#}
result[[indexr1]]$route <- route1
result[[indexr2]]$route <- route2
new_cost <- calculateTotalDistanceTS(input, alpha, result)
}
else {
# type
new_type1 <- check_new_type(result[[indexr1]]$type, route1, input)
# penalty_inf
penalty_inf <- alpha * calc_penalty_unique(input, new_type1, route1)
# penalty_freq
#penalty_freq <- 0
#if ((zeta!=0)&&(alpha!=0)) {
#  for (i in 1:length(client1)) {
#    penalty_freq <- penalty_freq + return_table_freq(table_freq, client1[i], indexr1)
#  }
#  penalty_freq <- 1 + zeta * penalty_freq / counter_i
# cost
#  cost1 <-  (local_cost(route1, input$matriz.distancia) + penalty_inf) * penalty_freq
#} else {
# cost
#  cost1 <-  (local_cost(route1, input$matriz.distancia) + penalty_inf)
#}
result[[indexr1]]$route <- route1
new_cost <- calculateTotalDistanceTS(input, alpha, result)
}
counter <- length(mov_list) + 1
mov_list[[counter]] <- list()
mov_list[[counter]]$indexr1 <- indexr1
mov_list[[counter]]$indexr2 <- indexr2
mov_list[[counter]]$mov_name <- string
mov_list[[counter]]$route1 <- route1
mov_list[[counter]]$route2 <- route2
mov_list[[counter]]$client1 <- client1
mov_list[[counter]]$client2 <- client2
mov_list_cost[[counter]] <- new_cost
res <- list()
res$mov_list <- mov_list
res$mov_list_cost <- mov_list_cost
return(res)
}
check_new_type<-function(type_root, route, input){
all_vc <- 1
subroutes <- 0
for (i in 2:(length(route)-1)) {
if (route[i] >  input$n1) all_vc <- 0
if (sum(route==route[i])>1) subroutes <- 1
}
# determine new type
if ((all_vc)&&(!subroutes)&&(type_root == "CVR")) type_root <- "PVR"
if ((!all_vc)&&(!subroutes)&&(type_root == "CVR")) type_root <- "PTR"
else if (subroutes) type_root <- "CVR"
return(type_root)
}
is_in_vecinity<-function(clienti, clientw, vecinity, perc_vecinity){
local_vecinity <- vecinity[[clienti]][1:ceiling(length(vecinity[[clienti]])*perc_vecinity)]
if (sum(clientw %in% local_vecinity)) return (1)
else return (0)
}
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
lista[[1]] <- 1
lista <- list()
lista[[1]] <- 1
lista[[2]] <- 2
lista[[3]] <- 3
lista[[4]] <- 4
vecto <- c(2,3,4,1)
lista[[vecto]]
lista[vecto]
library(mcttrpcw)
lista[vecto]
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=5, verbose=0)
library(mcttrpcw)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=5, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=5, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=5, verbose=0)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
library(mcttrpcw)
result[[2]] <- MCTTRP_opt_solver("instances/CHAO_TTRP_02.txt", "TTRP", 5, 3, total_time=3600, total_iterations=100, verbose=0)
